import request from 'supertest';
import app from '../../../src/app';
import { connectDatabase } from '../../../src/config/database';

describe('Routes Integration Tests', () => {
  beforeAll(async () => {
    await connectDatabase();
  });

  afterAll(async () => {
    // Close the database connection if needed
  });

  describe('Auth Routes', () => {
    it('should register a new user', async () => {
      const response = await request(app)
        .post('/register')
        .send({ username: 'testuser', password: 'password123' });
      expect(response.status).toBe(201);
      expect(response.body).toHaveProperty('username', 'testuser');
    });

    it('should login an existing user', async () => {
      const response = await request(app)
        .post('/login')
        .send({ username: 'testuser', password: 'password123' });
      expect(response.status).toBe(200);
      // Add more assertions based on your login response
    });
  });

  describe('Habits Routes', () => {
    it('should fetch all habits', async () => {
      const response = await request(app).get('/habits');
      expect(response.status).toBe(200);
      // Add more assertions based on your habits response
    });
  });

  describe('Mood Routes', () => {
    it('should fetch all mood entries', async () => {
      const response = await request(app).get('/mood');
      expect(response.status).toBe(200);
      // Add more assertions based on your mood entries response
    });
  });

  describe('Journal Routes', () => {
    it('should fetch all journal entries', async () => {
      const response = await request(app).get('/journal');
      expect(response.status).toBe(200);
      // Add more assertions based on your journal entries response
    });
  });

  describe('User Routes', () => {
    it('should fetch all users', async () => {
      const response = await request(app).get('/users');
      expect(response.status).toBe(200);
      // Add more assertions based on your users response
    });
  });
});